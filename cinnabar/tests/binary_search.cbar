package "bynary_search";
plug std.io;
plug rand;
plug tools.make_macro;

make_macro! {
    macro rnd_arr(array:arr[int]) {
        quote {
            loop {
                let i : int = 0;
                set j : int = array.len() // 100;
                let rnd_int : int = rand.rand_int(1, j, repeat = false);
                match i {
                    >= j => break;
                    < j {
                        array.push(rnd_int);
                    }
                }
                i +=1;
            }
        }
    }
}

void binary_search(array:arr[int], target:int left:int=0, right:int=Nil): int {
    match right => == Nil => right = array.len() -1;
    match left => > right => take -1;
    let mid :int = (left + right) / 2;

    match array[mid] {
        == target => take mid;
        < target  => take binary_search(array, target, mid+1, right);
        > target  => take binary_search(array, target, left, mid-1);
        _ => take -2;
        }
    }


void main() {
    сomptime {
        let some_array : arr[int, 100];
        rnd_arr!(some_array); // хочу, чтоб сгенерировался массив на этапе компиляции и не менялся в программе
    }
    io.print("Введите число для поиска (0..100): ");
    let target_num:int = io.inputln();
    result = binary_search(some_array, target_num);
    io.println($"target = {target_num}, result = {result}");
    }
